Several different options are available for modelling the information in these four quadrants. The problem space can be described e.g.with Feature Models, or with a Domain Specific Language (DSL).There are also a number of different options for modelling the solution space,for example component libraries, DSL compilers, generative programs and also configuration files. [Cza00].

In the rest of this article we will consider each of these quadrants in turn, beginning with Domain Engineering activities. We will firstlook at modelling the problem space - what is common to, and what differsbetween, the different product variants. Then we will consider one possibleapproach for realising product variants in the solution space using C++ as anexample. Finally, we will look at how Application Engineering is performed byusing the problem and solution space models to create a product variant. Inreality, this linear flow is rarely found in practice. Product Lines usuallyevolve continuously, even after the first product variants have been defined and delivered to customers.

Our example Product Line will contain different products for entry and display of meteorological data on a PC. An initial brainstormingsession has led to a set of possible differences (variation points)between possible products: meteorological data can come from different sensorsattached to the PC, fetched from appropriate Internet services or generateddirectly by the product for demonstration and test purposes. Data can be outputdirectly from the application, distributed as HTML or XML through an integratedWeb server or regularly written to file on a fixed disk. The measurements tomake can also vary: temperature, air pressure, wind velocity and humidity couldall be of interest. Finally the units of measure could also vary (degrees Celsius vs. Fahrenheit, hPa vs. mmHg, m / s vs. Beaufort).