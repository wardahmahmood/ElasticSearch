oftware mass-customization in the design of eBusiness processes not only from the viewpoints of software and systems product and services providers but also from the viewpoints of end-users and managers of eBusiness processes. We will have several international visiting experts involved in the course: Dr. Rick Rabiser from <span style="background-color: rgb(246, 246, 255); color: rgb(8, 8, 15); font-family: 'Trebuchet MS', Verdana, Arial, Helvetica, sans-serif; font-size: 13px; text-align: justify; ">Johannet for competitive products in practically all industries. Thus, competitiveness in software development has become a concern for companies. There are two primary strategies to deal with this concern: increasing the competitiveness internally through methods such as large-scale reuse of existing software assets or externally by outsourcing software development activities to third party vendors. Additionally, companies may choose to enact both strategies in parallel. In this course, the first strategy is priusinesses need to emphasize their own product development and marketing.

Software product line engineering is an industrially validated methodology that software businesses can leverage to move from a service business model toward a software product business model and to develop software products and software-intensive systems faster, at lower costs, and with better quality and higher end-user satisfaction. It enables strategic reuse of requirements, features, pieces of software code, test cases, and numobal attention during this decade. It has been leveraged widely in business-to-business settings (e.g., designing and selling product suites that enable entire enterprise architectures) and business-to-consumer settings (e.g., office products, platforms for cellular phones).

Software product line engineering differs from single-system engineering in two primary ways: 1. It requires two distinct development processes: domain engineering and application engineering. Domain engineering defines and realizes pplications within the line do not have. During domain engineering, variability is introduced into all domain artifacts such as requirements, architectural models, components, and test cases. It is exploited during application engineering in order to derive applications tailored to the needs of different customers.

Because multiple products that share similar features should be considered in software product line engineering, the complexity of software product line engineering is high compared to single ese processes. • The smart homes domain from which examples are drawn to help students understand the covered issues. • Product line variability o Orthogonal variability model to document variability clearly and unambiguously throughout the course. o Documenting variability in requirements artifacts, that is, textual requirements, features, scenarios, use cases, statecharts, and class diagrams. o Documenting variability in architectural artifacts, that is, in the development view, the process view, and the chitecture for the product line. o Domain realization to design reusable software components that implement commonality and variability in the reference architecture. o Domain testing to establish a systematic reuse of test artifacts throughout product line testing. o Selecting commercial off-the-shelf components to implement a significant portion of the overall functionality of the product line. • Application engineering o Application requirements engineering to exploit common and variable artifacts of thement to software product line engineering • Industrial experiences about applying the software product line paradigm • Future research topics for various thesis projects